import { Request, Response, Router } from "express"
import prisma from "../../../libs/prisma"
import bcrypt from "bcryptjs"
import jwt from "jsonwebtoken"
import { UserProps } from "../../../types"
import {
  ALLOWED_ROLES,
  authMiddleware,
  AuthRequest,
  permissionMiddleware,
} from "../../../middleware"
import path from "path"
import fs from "fs"
import RESP_MSG from "../../../constants"
import { createUploader } from "../../../utils/upload"
import logging from "../../../utils/logging"

const router = Router()
const { uploader: upload, uploadDir } = createUploader("users")

router.get(
  "/",
  authMiddleware,
  permissionMiddleware(ALLOWED_ROLES.ALL),
  async (req: Request, res: Response) => {
    logging("GET", "v1", `/users`)

    try {
      const users = await prisma.users.findMany({
        select: {
          id: true,
          name: true,
          nickname: true,
          jobposi: true,
          usercode: true,
          telephone: true,
          userpic: true,
          status: true,
        },
      })

      const formatUsers = users.map(u => ({
        id: u.id,
        name: u.name,
        nickname: u.nickname,
        permission: u.jobposi,
        username: u.usercode,
        phone: u.telephone,
        avatar: u.userpic,
        status: u.status,
      }))

      res.json(formatUsers)
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error)
      res.json({
        counts: 0,
        users: [],
      })
    }
  }
)

router.get(
  "/v/:id",
  authMiddleware,
  permissionMiddleware(ALLOWED_ROLES.ALL),
  async (req: Request, res: Response) => {
    const { id } = req.params
    logging("GET", "v1", `/users/v/${id}`)

    try {
      const user = await prisma.users.findUnique({
        select: {
          id: true,
          name: true,
          nickname: true,
          jobposi: true,
          usercode: true,
          telephone: true,
          userpic: true,
          status: true,
        },
        where: { id: Number(id) },
      })

      const formatUsers = {
        id: user?.id,
        name: user?.name,
        nickname: user?.nickname,
        permission: user?.jobposi,
        username: user?.usercode,
        phone: user?.telephone,
        avatar: user?.userpic,
        status: user?.status,
      }

      res.json({ success: true, user: formatUsers })
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error)
      res.json({ success: false, user: null })
    }
  }
)

router.post("/login", async (req: Request, res: Response) => {
  const { username, password } = req.body

  try {
    const user = await prisma.users.findUnique({
      where: { usercode: username },
    })

    if (!user || !user.status) {
      res.status(401).json({
        success: false,
        message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      })
      return
    }

    const isMatch = await bcrypt.compare(password, String(user.password))

    if (!isMatch) {
      res.status(401).json({
        success: false,
        message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      })
      return
    }

    const userPayload = {
      id: user.id,
      name: user.name,
      nickname: user.nickname,
      permission: user.jobposi,
      username: user.usercode,
      phone: user.telephone,
      avatar: user.userpic,
    }

    const secretKey = process.env.SECRET_KEY as string
    const refreshSecretKey = process.env.REFRESH_SECRET_KEY as string // ‡πÉ‡∏ä‡πâ key ‡πÅ‡∏¢‡∏Å‡∏à‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤

    const accessToken = jwt.sign(userPayload, secretKey, { expiresIn: "3h" }) // access token ‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏±‡πâ‡∏ô
    const refreshToken = jwt.sign(userPayload, refreshSecretKey, {
      expiresIn: "7d",
    }) // refresh token ‡∏≠‡∏≤‡∏¢‡∏∏‡∏¢‡∏≤‡∏ß

    res.json({
      success: true,
      message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      token: accessToken,
      refreshToken, // ‚¨ÖÔ∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
      user: userPayload,
    })
  } catch (error) {
    console.error("‚ùå login error:", error)
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
    })
  }
})

router.post("/refresh-token", async (req: Request, res: Response) => {
  const { refreshToken } = req.body
  logging("POST", "v1", `/users/refresh-token`)

  if (!refreshToken) {
    res.status(401).json({
      success: false,
      message: "‡πÑ‡∏°‡πà‡∏°‡∏µ refresh token",
    })
    return
  }

  try {
    const refreshSecretKey = process.env.REFRESH_SECRET_KEY as string
    const decoded = jwt.verify(refreshToken, refreshSecretKey) as UserProps

    const user = await prisma.users.findUnique({
      where: { id: decoded.id },
      select: {
        id: true,
        name: true,
        nickname: true,
        jobposi: true,
        usercode: true,
        telephone: true,
        userpic: true,
        status: true,
      },
    })

    if (!user || !user.status) {
      res
        .status(403)
        .json({ success: false, message: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" })
      return
    }

    const newToken = jwt.sign(
      {
        id: user.id,
        name: user.name,
        nickname: user.nickname,
        permission: user.jobposi,
        username: user.usercode,
        phone: user.telephone,
        avatar: user.userpic,
      },
      refreshSecretKey,
      { expiresIn: "3h" }
    )

    res.json({ success: true, token: newToken })
  } catch (error) {
    console.error("‚ùå refresh token error:", error)
    res
      .status(403)
      .json({ success: false, message: "refresh token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
  }
})

router.get(
  "/authen",
  authMiddleware,
  permissionMiddleware(ALLOWED_ROLES.ALL),
  async (req: Request, res: Response) => {
    const token = req.headers.authorization?.split(" ")[1]
    const SECRET_KET = process.env.SECRET_KEY as string
    logging("GET", "v1", `/users/authen`)

    if (!token) {
      res.json({ success: false, message: RESP_MSG.MISSION_TOKEN })
      return
    }

    try {
      const decoded = jwt.verify(token, SECRET_KET) as UserProps
      res.json({ success: true, user: decoded })
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error)
      res.json({ success: false, message: RESP_MSG.MISSION_TOKEN })
    }
  }
)

//? Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
router.post(
  "/create",
  authMiddleware,
  permissionMiddleware(ALLOWED_ROLES.ADMIN),
  async (req: AuthRequest, res: Response) => {
    const { name, nickname, username, phone, permission } = req.body
    logging("POST", "v1", `/users/create`)

    // Validation
    if (!name || !nickname || !username || !phone || !permission) {
      res.status(400).json({
        success: false,
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
      })
      return
    }

    try {
      const updateUser = req.user?.username

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ usercode ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingUser = await prisma.users.findUnique({
        where: {
          usercode: username,
        },
      })

      if (existingUser) {
        res.status(409).json({
          success: false,
          message: "‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
        })
        return
      }

      const hashPassword = await bcrypt.hash("1234", 12)

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      await prisma.users.create({
        data: {
          name,
          nickname,
          usercode: username,
          telephone: phone,
          jobposi: permission, // "member" ‡∏´‡∏£‡∏∑‡∏≠ "admin"
          password: hashPassword, // ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö reset password ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà default ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
          createur: updateUser || "system", // ‡∏à‡∏≤‡∏Å token
          updateur: updateUser || "system",
        },
      })

      res.status(201).json({
        success: true,
        message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      })
    } catch (error) {
      console.error(error)
      res.status(500).json({
        success: false,
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      })
    }
  }
)

//? Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
router.post(
  "/update/info/:id",
  authMiddleware,
  permissionMiddleware(ALLOWED_ROLES.ALL),
  async (req: AuthRequest, res: Response) => {
    const { id } = req.params
    const { name, nickname, username, phone, permission, status } = req.body
    logging("POST", "v1", `/users/info/${id}`)

    if (!id || !name || !nickname || !username || !phone) {
      res.status(400).json({ success: false, message: RESP_MSG.MISSION_VALUE })
      return
    }

    try {
      const updateUser = req.user?.username
      const requesterId = req.user?.id
      const requesterRole = req.user?.permission

      if (!updateUser) {
        res
          .status(403)
          .json({ success: false, message: RESP_MSG.AUTHEN_FAILED })
        return
      }

      // üõ°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin ‡πÅ‡∏•‡∏∞ id ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      if (requesterRole !== "admin" && Number(id) !== requesterId) {
        res.status(403).json({
          success: false,
          message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô",
        })
        return
      }

      const payload =
        requesterRole === "admin"
          ? {
              name,
              nickname,
              usercode: username,
              jobposi: permission,
              telephone: phone,
              status,
            }
          : {
              name,
              nickname,
              usercode: username,
              telephone: phone,
            }

      const updateResults = await prisma.users.update({
        data: payload,
        where: { id: Number(id) },
      })

      if (updateResults) {
        res.json({ success: true, message: RESP_MSG.SUCCESS_UPDATE })
      } else {
        throw new Error(RESP_MSG.FAILED_UPDATE)
      }
    } catch (error: any) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error)
      res.json({
        success: false,
        message: error.message ?? RESP_MSG.ERROR,
      })
    }
  }
)

router.post(
  "/change-password/:id",
  authMiddleware,
  permissionMiddleware(ALLOWED_ROLES.ALL), // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  async (req: AuthRequest, res: Response) => {
    const { id } = req.params
    const { oldPassword, newPassword } = req.body
    logging("POST", "v1", `/users/change-password/${id}`)

    const currentUser = req.user // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å authMiddleware

    if ((currentUser?.permission !== "admin" && !oldPassword) || !newPassword) {
      res
        .status(400)
        .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" })
      return
    }

    const userToUpdate = await prisma.users.findUnique({
      where: { id: Number(id) },
    })
    if (!userToUpdate) {
      res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" })
      return
    }

    // üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ß‡πà‡∏≤ user ‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    const isSelf = currentUser?.id === Number(id)
    const isAdmin = currentUser?.permission === "admin" // ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ role ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á

    if (!isSelf && !isAdmin) {
      res.status(403).json({
        success: false,
        message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ",
      })
      return
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤
    if (!isAdmin) {
      const isMatch = await bcrypt.compare(
        oldPassword,
        String(userToUpdate?.password)
      )
      if (!isMatch) {
        res
          .status(401)
          .json({ success: false, message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
        return
      }
    }

    const hashedPassword = await bcrypt.hash(newPassword, 12)
    await prisma.users.update({
      where: { id: Number(id) },
      data: { password: hashedPassword },
    })

    res.json({ success: true, message: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" })
  }
)

router.post(
  "/:id/upload-avatar",
  authMiddleware,
  permissionMiddleware(ALLOWED_ROLES.ALL),
  upload.single("avatar"),
  async (req: Request, res: Response) => {
    const userId = req.params.id
    const newImage = req.file?.filename
    logging("POST", "v1", `/users/${userId}/upload-avatar`)

    if (!newImage) {
      res.status(400).json({ success: false, message: "No file uploaded." })
      return
    }

    try {
      const user = await prisma.users.findUnique({
        where: { id: Number(userId) },
      })

      // ‚úÖ ‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å uploadDir
      if (user?.userpic) {
        const oldImageFile = user.userpic
        const oldFilePath = path.join(uploadDir, oldImageFile)
        if (fs.existsSync(oldFilePath)) {
          fs.unlinkSync(oldFilePath)
        }
      }

      await prisma.users.update({
        where: { id: Number(userId) },
        data: { userpic: newImage },
      })

      res.json({ success: true, image_file: newImage })
    } catch (error) {
      console.error("Upload error:", error)
      res.status(500).json({ success: false, message: "Server error" })
    }
  }
)

router.delete(
  "/:id",
  authMiddleware,
  permissionMiddleware(ALLOWED_ROLES.ADMIN),
  async (req: AuthRequest, res: Response) => {
    const { id } = req.params
    logging("DELETE", "v1", `/users/${id}`)

    if (!id) {
      res.json({ success: false, message: RESP_MSG.MISSION_VALUE })
      return
    }

    try {
      const currentUser = req.user
      if (currentUser?.id === Number(id)) {
        res
          .status(400)
          .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ" })
        return
      }

      const results = await prisma.users.delete({ where: { id: Number(id) } })

      if (results) {
        res.json({ success: true, message: RESP_MSG.SUCCESS_DELETE })
      } else {
        throw new Error(RESP_MSG.FAILED_DELETE)
      }
    } catch (error: any) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error)
      res.json({ success: false, message: error.message ?? RESP_MSG.ERROR })
    }
  }
)

export default router
